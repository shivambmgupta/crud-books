[{"/home/shivam/projects/users/client/src/index.js":"1","/home/shivam/projects/users/client/src/App.js":"2","/home/shivam/projects/users/client/src/reportWebVitals.js":"3","/home/shivam/projects/users/client/src/pages/Login/Login.js":"4","/home/shivam/projects/users/client/src/pages/Home/Home.js":"5","/home/shivam/projects/users/client/src/components/LoginForm.js":"6","/home/shivam/projects/users/client/src/reducers/Index.js":"7","/home/shivam/projects/users/client/src/Consts/Consts.js":"8","/home/shivam/projects/users/client/src/reducers/MainReducer.js":"9","/home/shivam/projects/users/client/src/actions/LoginActions.js":"10","/home/shivam/projects/users/client/src/modals/DeleteModal.js":"11","/home/shivam/projects/users/client/src/modals/BookModal.js":"12","/home/shivam/projects/users/client/src/actions/BookActions.js":"13","/home/shivam/projects/users/client/src/Books.js":"14"},{"size":500,"mtime":1610966294549,"results":"15","hashOfConfig":"16"},{"size":727,"mtime":1610968101241,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":1610966294549,"results":"18","hashOfConfig":"16"},{"size":947,"mtime":1610972750960,"results":"19","hashOfConfig":"16"},{"size":5085,"mtime":1610973531488,"results":"20","hashOfConfig":"16"},{"size":1289,"mtime":1610967434634,"results":"21","hashOfConfig":"16"},{"size":169,"mtime":1610968815049,"results":"22","hashOfConfig":"16"},{"size":272,"mtime":1610968438585,"results":"23","hashOfConfig":"16"},{"size":681,"mtime":1610973374711,"results":"24","hashOfConfig":"16"},{"size":575,"mtime":1610973060277,"results":"25","hashOfConfig":"16"},{"size":688,"mtime":1610971646443,"results":"26","hashOfConfig":"16"},{"size":2033,"mtime":1610971315324,"results":"27","hashOfConfig":"16"},{"size":869,"mtime":1610973323655,"results":"28","hashOfConfig":"16"},{"size":292,"mtime":1610973546225,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"9krg3u",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/shivam/projects/users/client/src/index.js",[],["61","62"],"/home/shivam/projects/users/client/src/App.js",[],"/home/shivam/projects/users/client/src/reportWebVitals.js",[],"/home/shivam/projects/users/client/src/pages/Login/Login.js",["63"],"/home/shivam/projects/users/client/src/pages/Home/Home.js",["64","65"],"import React, { Component } from 'react';\nimport { Table, Space, Row, Col, Button } from 'antd';\nimport { EditFilled, DeleteFilled } from '@ant-design/icons';\nimport DeleteModal from '../../modals/DeleteModal';\nimport BookModal from '../../modals/BookModal';\nimport { connect } from 'react-redux';\n\n\nclass Home extends Component {\n    constructor(props) {\n        super(props);\n        //if (!props.user?.username) props.history.push(\"/\")\n        this.state = {\n            books: [],\n            deleteModalVisible: false,\n            editModalVisible: false,\n            addModalVisible: false\n        };\n    }\n\n    columns = [\n        {\n            title: 'S.No',\n            dataIndex: 'sno',\n            key: 'sno',\n            render: text => <a>{text}</a>,\n        },\n        {\n            title: 'Book Name',\n            dataIndex: 'name',\n            key: 'name',\n        },\n        {\n            title: 'MRP',\n            dataIndex: 'mrp',\n            key: 'mrp',\n        },\n        {\n            title: 'Author Name',\n            dataIndex: 'author_name',\n            key: 'author_name',\n        },\n        {\n            title: 'Action',\n            key: 'action',\n            render: (record) => {\n                return (\n                    <Space size=\"middle\" style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n                        <Button type=\"primary\" onClick={() => this.updateEditModalVisibility(record)} shape=\"round\" icon={<EditFilled />} size={16} />\n                        <Button type=\"primary\" onClick={() => this.updateDeleteModalVisibility(record)} shape=\"round\" icon={<DeleteFilled />} size={16} />\n                    </Space>);\n            },\n        },\n    ];\n\n    updateDeleteModalVisibility = (book) => {\n        book ?\n            this.setState((prevState) => ({ deleteModalVisible: !prevState.deleteModalVisible, selectedBook: book })) :\n            this.setState((prevState) => ({ deleteModalVisible: !prevState.deleteModalVisible }))\n    }\n\n    updateEditModalVisibility = (book) => {\n        book ?\n            this.setState((prevState) => ({ editModalVisible: !prevState.editModalVisible, selectedBook: book })) :\n            this.setState((prevState) => ({ editModalVisible: !prevState.editModalVisible }))\n    }\n\n    updateAddModalVisibility = () => {\n        this.setState((prevState) => ({ addModalVisible: !prevState.addModalVisible }));\n    }\n\n    componentWillReceiveProps(nextProps) {\n        console.log(\"component will receive props\");\n        if (!nextProps.user.username) this.props.history.push(\"/\")\n        else this.setState({ books: nextProps.books, user: nextProps.user }, () => console.log('details  of the user updated', this.state.user));\n    }\n\n    componentWillUpdate() {\n        if (!this.props.user.username) this.props.history.push(\"/\")\n    }\n\n    render() {\n        return (\n            <div style={{\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                width: '100%',\n                height: '100vh',\n            }}>\n                <div style={{\n                    width: '80%',\n                    height: '80vh',\n                    boxShadow: '0px 0px 10px #FFFFF',\n                    padding: '20px',\n                    fontSize: '24px'\n\n                }}>\n                    <Row style={{ marginBottom: '30px' }}>\n                        <Col span={12}>\n                            <div>{`Hello, ${this.props.user?.username?.substr(0, this.props.user?.username?.indexOf('@'))}`}</div>\n                        </Col>\n                        <Col span={12} style={{ display: 'flex', flexDirection: 'row-reverse' }} >\n                                <Button type=\"primary\" size={24} >Logout</Button>\n                        </Col>\n                    </Row>\n                    <Row style={{ display: 'flex', flexDirection: 'row-reverse', marginBottom: '40px' }}>\n                        <Col>\n                            <Button type=\"primary\" onClick={this.updateAddModalVisibility}>Add</Button>\n                        </Col>\n                    </Row>\n                    {this.state.deleteModalVisible && <DeleteModal isVisible={true} setIsModalVisible={this.updateDeleteModalVisibility} user={this.state.selectedUser} />}\n                    {this.state.editModalVisible && <BookModal isVisible={true} setIsModalVisible={this.updateEditModalVisibility} user={this.state.selectedUser} />}\n                    {this.state.addModalVisible && <BookModal isVisible={true} setIsModalVisible={this.updateAddModalVisibility} newUser={true} />}\n                    <Table columns={this.columns} dataSource={this.state.users} bordered />\n                    <Row style={{ fontSize: '16px', margin: '20px' }}>\n                        <Col span={12}>\n                            <div> <footer>&copy; {`Copyright Shivam`}</footer> </div>\n                        </Col>\n                        <Col span={12} style={{ display: 'flex', flexDirection: 'row-reverse' }} > {`Random Company Name`}\n                        </Col>\n                    </Row>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        user: state.user,\n        books: state.books\n    }\n}\n\nexport default connect(mapStateToProps, null)(Home);","/home/shivam/projects/users/client/src/components/LoginForm.js",[],"/home/shivam/projects/users/client/src/reducers/Index.js",[],"/home/shivam/projects/users/client/src/Consts/Consts.js",[],"/home/shivam/projects/users/client/src/reducers/MainReducer.js",[],"/home/shivam/projects/users/client/src/actions/LoginActions.js",["66","67"],"/home/shivam/projects/users/client/src/modals/DeleteModal.js",["68"],"/home/shivam/projects/users/client/src/modals/BookModal.js",["69","70","71","72","73","74"],"import React from 'react';\nimport { Modal } from 'antd';\nimport { Form, Input, InputNumber, Button } from 'antd';\nimport { UploadOutlined } from '@ant-design/icons';\nimport { useDispatch } from 'react-redux';\nimport { addBook, updateBook } from '../actions/BookActions';\n\nconst layout = {\n  labelCol: {\n    span: 6,\n  },\n  wrapperCol: {\n    span: 16,\n  },\n};\nconst validateMessages = {\n  required: '${label} is required!',\n  types: {\n    email: '${label} is not a valid email!',\n    number: '${label} is not a valid number!',\n  }\n};\n\nconst BookModal = ({ setIsModalVisible, isVisible, newBook, book }) => {\n  const dispatchUpdateAction = useDispatch();\n  const dispatchAddAction = useDispatch();\n  const handleOk = () => {\n    if (newBook) {\n      dispatchAddAction(addBook(book))\n    } else {\n      dispatchUpdateAction(updateBook(book));\n    }\n    setIsModalVisible(false);\n  };\n\n  const handleCancel = () => {\n    setIsModalVisible(false);\n  };\n\n  return (\n    <Modal visible={isVisible} title={newBook ? 'Add New Book' : 'Edit Book'} onOk={handleOk} onCancel={handleCancel}>\n      <Form {...layout} name=\"nest-messages\" onFinish={handleOk} validateMessages={validateMessages}>\n\n        <Form.Item\n          name={['book', 'name']}\n          label=\"Name\"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <Input defaultValue={book ? book.name : null} />\n        </Form.Item>\n\n\n        <Form.Item\n          name={['book', 'mrp']}\n          label=\"MRP\"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <Input defaultValue={book ? book.mrp : null} />\n        </Form.Item>\n\n        <Form.Item\n          name={['book', 'author_name']}\n          label=\"Author Name\"\n          rules={[\n            {\n              required: true\n            },\n          ]}\n        >\n          <Input defaultValue={book ? book.author_name : null} />\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n}\n\nexport default BookModal;","/home/shivam/projects/users/client/src/actions/BookActions.js",[],"/home/shivam/projects/users/client/src/Books.js",[],{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","severity":1,"message":"80","line":25,"column":8,"nodeType":"81","endLine":25,"endColumn":25,"suggestions":"82"},{"ruleId":"83","severity":1,"message":"84","line":2,"column":42,"nodeType":"85","messageId":"86","endLine":2,"endColumn":50},{"ruleId":"87","severity":1,"message":"88","line":26,"column":29,"nodeType":"89","endLine":26,"endColumn":32},{"ruleId":"90","severity":1,"message":"91","line":7,"column":21,"nodeType":"92","messageId":"93","endLine":7,"endColumn":23},{"ruleId":"83","severity":1,"message":"94","line":8,"column":15,"nodeType":"85","messageId":"86","endLine":8,"endColumn":19},{"ruleId":"83","severity":1,"message":"95","line":3,"column":13,"nodeType":"85","messageId":"86","endLine":3,"endColumn":19},{"ruleId":"83","severity":1,"message":"96","line":3,"column":23,"nodeType":"85","messageId":"86","endLine":3,"endColumn":34},{"ruleId":"83","severity":1,"message":"97","line":3,"column":36,"nodeType":"85","messageId":"86","endLine":3,"endColumn":42},{"ruleId":"83","severity":1,"message":"98","line":4,"column":10,"nodeType":"85","messageId":"86","endLine":4,"endColumn":24},{"ruleId":"99","severity":1,"message":"100","line":17,"column":13,"nodeType":"101","messageId":"102","endLine":17,"endColumn":36},{"ruleId":"99","severity":1,"message":"100","line":19,"column":12,"nodeType":"101","messageId":"102","endLine":19,"endColumn":44},{"ruleId":"99","severity":1,"message":"100","line":20,"column":13,"nodeType":"101","messageId":"102","endLine":20,"endColumn":46},"no-native-reassign",["103"],"no-negated-in-lhs",["104"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["105"],"no-unused-vars","'Dropdown' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'user' is assigned a value but never used.","'Consts' is defined but never used.","'InputNumber' is defined but never used.","'Button' is defined but never used.","'UploadOutlined' is defined but never used.","no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","no-global-assign","no-unsafe-negation",{"desc":"106","fix":"107"},"Update the dependencies array to be: [user, dispatch, history]",{"range":"108","text":"109"},[703,720],"[user, dispatch, history]"]